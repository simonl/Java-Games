package dawson111.labexercises;

import javax.swing.*;

/** Determines the value and suit of 9 cards, each corresponding to
 *  the numbers, from 0 to 51, randomly generated by the program.
 *  Rank from 1 to 13.
 *  Suit from hearts, represented by 0, diamonds, clubs
 *  and to spades, being 3.
 *  Will display the string equivalent of the card numbers.
 *
 *  @authors Simon Langlois, Pierre Miguel
 *           and Vincenzo Patrinostro - A933125 - 420-111-DW section 1
 *  @version    11/27/2009
 */


public class CardsThree
{
    public static void main (String[] args)
    {
	//variable declarations
	int newCard = 0, cardsInDeck = 1;
	long deck = 0;
	String cardIdentity = "", listOfCards = "";

	//Draw nine cards and output their identity
	while (cardsInDeck <= 9)
	{
	    //Get a random card number, checked to not already have been dealt
	    newCard = getCard(deck) + 1;

	    //Add the new card to the deck
	    deck = (deck * 100) + newCard;

	    //Output the name of the card
	    cardIdentity = convertToString(newCard);
	    listOfCards = listOfCards + "\n    Card " + cardsInDeck + " : " + cardIdentity;

	    //Increment the drawing counter
	    cardsInDeck = cardsInDeck + 1;
	}

	//Display the output
	JOptionPane.showMessageDialog (null,
		"********** Card Number and its Identity **********\n\n" +
		"Deck of card :    " + 
		deck + "\n\n" +
		"Name of the cards :" +
		listOfCards + "\n\n" +
		"Written by : Simon Langlois,\n" +
		"                       Pierre Miguel,\n" +
		"                       Vincenzo Patrinostro\n\n",
		"Cards",
		JOptionPane.INFORMATION_MESSAGE);

	System.exit (0);

    } //end main()


    //Check if the new card is already in the deck
    public static boolean checkIfAlreadyDealt (int newCard, long deck)
    {
	int oldCard;
	boolean cardIsDealt = false;

	//Check the card until it finds a match, or the deck is empty
	while (deck != 0 && !cardIsDealt)
	{
	    //Isolate the last card in the deck
	    oldCard = (int) (deck % 100);

	    //Test is against the new card, and assign the result to isAlreadyDealt
	    cardIsDealt = ((newCard + 1) == oldCard);

	    //jump to the next card in the deck
	    deck = deck / 100;
	}

	return cardIsDealt;
    }
    
    
    //Receives a card number from 0 to 51 and returns the corresponding name
    public static String convertToString (int cardNumber)
    {
	int cardFaceValue, cardSuit;
	String faceValueName, suitName;
	String cardIdentity;

	//determine the value and suit of the card, in numbers
	cardFaceValue = (cardNumber % 13) + 1;
	cardSuit = cardNumber / 13;

	//Get the value and suit strings
	faceValueName = getFaceValue(cardFaceValue);
	suitName = getSuit (cardSuit);

	//Get a coherent phrase out of the value and suit
	cardIdentity = "The " + faceValueName + " of " + suitName;

	//Return the whole identity of the card
	return cardIdentity;
    }


    //Deal a new card
    public static int getCard (long deck)
    {
	int newCard = 0;
	boolean cardIsDealt = true;

	//Draw cards until it finds one that is not already dealt
	while (cardIsDealt)
	{
	    //Draw a card
	    newCard = getCardNumber ();

	    //Check if the card is dealt
	    cardIsDealt = checkIfAlreadyDealt (newCard, deck);
	}

	return newCard;
    }
    
    
    //Returns a random integer between 0 and 51
    public static int getCardNumber ()
    {
	int newCard;

	//randomly select a card
	newCard = (int) (Math.random () * 52);

	//Return the random card number
	return newCard;
    }


    //Recieves a card value from 1 to 13 and returns the corresponding name
    public static String getFaceValue (int cardFaceValue)
    {
	String faceValueName;

	//Get the value of the card in words
	switch (cardFaceValue)
	{
	    case 1:
		faceValueName = "Ace";
		break;
	    case 2:
		faceValueName = "Two";
		break;
	    case 3:
		faceValueName = "Three";
		break;
	    case 4:
		faceValueName = "Four";
		break;
	    case 5:
		faceValueName = "Five";
		break;
	    case 6:
		faceValueName = "Six";
		break;
	    case 7:
		faceValueName = "Seven";
		break;
	    case 8:
		faceValueName = "Eight";
		break;
	    case 9:
		faceValueName = "Nine";
		break;
	    case 10:
		faceValueName = "Ten";
		break;
	    case 11:
		faceValueName = "Jack";
		break;
	    case 12:
		faceValueName = "Queen";
		break;
	    case 13:
		faceValueName = "King";
		break;
	    default:
		faceValueName = "Error";
		break;
	}

	//Return the value string
	return faceValueName;
    }


    //Get the name corresponding to a card suit from 0 to 3
    public static String getSuit (int cardSuit)
    {
	String suitName;

	//Get the suit of the card in word
	if (cardSuit <= 2)
	    if (cardSuit <= 1)
		if (cardSuit == 0)
		    suitName = "Hearts";
		else
		    suitName = "Diamonds";
	    else
		suitName = "Clubs";
	else
	    suitName = "Spades";

	//Return the suit string
	return suitName;
    }
    
} //end CardsTwo class
